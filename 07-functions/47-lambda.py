"""
lambda arguments: {code}
    Анонимная функция lambda это еще один способ создать функцию в Python, в отличии от def,
    не нужно указывать имя при её создании.

    Используются для создания однострочных функций. Они принимают неограниченное количество аргументов и
    возвращают только одно выражение, никаких блоков инструкций и циклов использовать нельзя.
"""


def f(x):  # определение обычной функции через def, назначаем имя и аргументы.
    return x ** 2  # что возвращает


print(f(4))  # вызов функции, обращение по имени

# В Python есть возможность создавать функции без имени (анонимные функции), lambda.
r = lambda x: x ** 2  # тот же эффект что и def f(x), только тут не использовали имя функции и слово return.
# нельзя проверить без имени, потому что невозможно к ней обратится, чтоб проверить можно присвоить переменную.
print(r(7))

print('\nПрименение:')
# Применение: когда необходимо создать функцию где выполняется одно только действие, или функция в одну строчку.
# Lambda заменяет функции с словом return.


def perimeter(a, b, c):
    return a + b + c


print(perimeter(1, 2, 3))

per = lambda a, b, c: a + b + c
h = lambda: 'hello'  # без аргумента

print(per(1, 2, 3))
print(h())

print('\nОграничение:')  # функции которые ничего не возвращают невозможно заменить lambda.
print('\nfor')  # в lambda нельзя использовать цыклы.


def factorial(n):  # такую функцию реализовать нельзя
    pr = 1
    for i in range(1, n + 1):
        pr *= 1
    return pr


print('\nif')  # с ограничением


def f(x):
    if x > 0:
        return 'positive'
    else:
        return 'negative'


t = lambda x: 'positive' if x > 0 else 'negative'  # if используется с lambda только в этом формате
# в lambda используется только одно выражение, нельзя использовать блоки.
print(t(5))
print(t(0))

print('\nИспользование:')
print('\n.sort()')


def f(x):
    return x % 10


a = [78, 56, 23, 8, 54512, 65, 95, 2354, 41, 5000]
a.sort(key=f)  # метод .sort() имеет именованный аргумент (key) который принимает функцию (с аргументом).
print(a)

a = [78, 56, 23, 8, 54512, 65, 95, 2354, 41, 5000]
a.sort(key=lambda x: x % 10)  # тот же результат что и с определением функции f(x).
print(a)

a = [78, 56, 23, 8, 54512, 65, 95, 2354, 41, 5000]
a.sort(key=lambda x: x // 10 % 10)  # предпоследняя цыфра.
print(a)

print('\n.linear()')


def linear(a, b):
    return lambda x: a * x + b


graf1 = linear(2, 5)
print(graf1(3))
graf2 = linear(-4, 1)
print(graf2(5))
