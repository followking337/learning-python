"""
В Python передача аргументов производится при помощи операции присваивания. При этом существуют следующие нюансы:
    - Аргументы передаются через автоматическое присваивание объектов локальным переменным.
    - Операция присваивания именам аргументов (локальным переменным) внутри функции не оказывает влияния
        на вызывающую программу.
    - Изменение внутри функции аргумента, который является изменяемым объектом,
        может изменить значение этого объекта в вызывающей программе.
"""
print('\nПример:')


def f(a, b):  # во время передачи происходит автоматическое присвоение аргументам указанным в определении функции
    print(id(a), id(b), 'local')  # аргументам f(a, b) присваиваются значения во время вызова функции f(c, d)
    a = 100  # локальные переменные ссылаються на теже объекты в памяти что и глобальные переменные
    # b = 200  # прямое их изменение ни как не влияют на изменения в глобальных переменных
    b.append(100)  # НО, если дело идет с изменяемыми объектами (списки и словари),
    b[1] = 'hi'    # косвенное изменение значений влечет изменения значений в глобальной области видимости
    print(id(a), id(b), 'local after')
    print(a, b, 'local')


# c = 20
# d = 50
c = 'hello'
d = [1, 2, 4, 6, 76]
print(id(c), id(d), 'global')
# f(c, d)  # f(a = c, b = d) локальная = глобальная
f(c, d[:])  # f(a = c, копия списка d) тогда список d в глобальной не изменится
print(c, d, 'global')

print('\nВарианты вызова функции в глобальной области видиммости:')


def f(a, b, c):
    print(a, b, c)


print('\n1. Позиционный:')
f(1, 5, 7)  # 1 5 7
# f(1, 5)  # TypeError: f() missing 1 required positional argument: 'c'
# f(1, 5, 7, 3)  # TypeError: f() takes 3 positional arguments but 4 were given

print('\n2. По имени:')
f(b=10, c=20, a=5)  # 5 10 20
# f(b=10, c=20, name=5)  # TypeError: f() got an unexpected keyword argument 'name'

print('\n3. Комбинированный:')
f(2, c=10, b=20)  # 2 20 10
# f(c=10, b=20, 2)  # SyntaxError: positional argument follows keyword argument

print('\nПараметры по умолчанию:')


def f(a, b='hello', c='Неизвестый'):  # сперва идут обязательные (a), потом по умолчанию (b, c)
    print(a, b, c)


# функцию f() можно вызывать от 1 до 3 аргументов
# f()  # TypeError: f() missing 1 required positional argument: 'a'
f(2)
f(2, 'three')  # параметр по умолчанию перезапишется вводными аргументами,
f(2, 'three', 'four')  # если их больше чем обязательных.
f(33, b='three')

max(3, 4, 2, 2, 54, 21, 43)  # произвольное количество аргументов
# f(key=10, a=20, b=30)  # произвольные имена (key) аргументов
